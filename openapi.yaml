openapi: 3.0.1
info:
  title: dataspace-connector
  description: IDS Connector developed by the Fraunhofer ISST
  contact:
    name: Fraunhofer Institute for Software and Systems Engineering
    url: https://www.dataspace-connector.io/
    email: info@dataspace-connector.de
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.txt
  version: 4.2.0
servers:
  - url: https://localhost:8080
    description: Generated server url
tags:
  - name: 'Backend: Resource Data Handling'
    description: Endpoints  for resource data handling
  - name: 'Connector: Resource Handling'
    description: Endpoints  for resource handling
  - name: 'Connector: IDS Connector Communication'
    description: Endpoints for invoking external connector requests
  - name: 'Connector: Selfservice'
    description: Endpoints for connector information
  - name: Examples
    description: Endpoints for testing purpose
  - name: 'Connector: IDS Broker Communication'
    description: Endpoints for invoking broker communication
paths:
  /admin/api/broker/unregister:
    post:
      tags:
        - 'Connector: IDS Broker Communication'
      summary: Unregister Connector
      description: Unregister connector at an IDS broker.
      operationId: unregisterAtBroker
      parameters:
        - name: broker
          in: query
          description: The url of the broker.
          required: true
          schema:
            type: string
          example: https://broker.ids.isst.fraunhofer.de/infrastructure
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/broker/query:
    post:
      tags:
        - 'Connector: IDS Broker Communication'
      summary: Broker Query Request
      description: Send a query request to an IDS broker.
      operationId: queryBroker
      parameters:
        - name: broker
          in: query
          description: The url of the broker.
          required: true
          schema:
            type: string
          example: https://broker.ids.isst.fraunhofer.de/infrastructure
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Database query (SparQL)
              example: |-
                SELECT ?subject ?predicate ?object
                FROM <urn:x-arq:UnionGraph>
                WHERE {
                  ?subject ?predicate ?object
                };
        required: true
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/broker/remove/{resource-id}:
    post:
      tags:
        - 'Connector: IDS Broker Communication'
      summary: Remove Resource from Broker
      description: Remove an IDS resource at an IDS broker.
      operationId: deleteResourceAtBroker
      parameters:
        - name: broker
          in: query
          description: The url of the broker.
          required: true
          schema:
            type: string
          example: https://broker.ids.isst.fraunhofer.de/infrastructure
        - name: resource-id
          in: path
          description: The resource id.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/broker/update/{resource-id}:
    post:
      tags:
        - 'Connector: IDS Broker Communication'
      summary: Update Resource at Broker
      description: Update an IDS resource at an IDS broker.
      operationId: updateResourceAtBroker
      parameters:
        - name: broker
          in: query
          description: The url of the broker.
          required: true
          schema:
            type: string
          example: https://broker.ids.isst.fraunhofer.de/infrastructure
        - name: resource-id
          in: path
          description: The resource id.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/broker/register:
    post:
      tags:
        - 'Connector: IDS Broker Communication'
      summary: Register Connector
      description: Register or update connector at an IDS broker.
      operationId: updateAtBroker
      parameters:
        - name: broker
          in: query
          description: The url of the broker.
          required: true
          schema:
            type: string
          example: https://broker.ids.isst.fraunhofer.de/infrastructure
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/broker/update:
    post:
      tags:
        - 'Connector: IDS Broker Communication'
      summary: Register Connector
      description: Register or update connector at an IDS broker.
      operationId: updateAtBroker_1
      parameters:
        - name: broker
          in: query
          description: The url of the broker.
          required: true
          schema:
            type: string
          example: https://broker.ids.isst.fraunhofer.de/infrastructure
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/example/usage-policy:
    post:
      tags:
        - Examples
      summary: Get example policy
      description: Get an example policy for a given policy pattern.
      operationId: getExampleUsagePolicy
      parameters:
        - name: pattern
          in: query
          description: The policy pattern.
          required: true
          schema:
            type: string
            enum:
              - PROVIDE_ACCESS
              - PROHIBIT_ACCESS
              - N_TIMES_USAGE
              - DURATION_USAGE
              - USAGE_DURING_INTERVAL
              - USAGE_UNTIL_DELETION
              - USAGE_LOGGING
              - USAGE_NOTIFICATION
      responses:
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: object
  /admin/api/example/configuration:
    get:
      tags:
        - Examples
      summary: Get Sample Connector configuration
      description: Get a sample connector configuration for the config.json.
      operationId: getConnectorConfiguration
      responses:
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/example/policy-validation:
    post:
      tags:
        - Examples
      summary: Get pattern of policy
      description: Get the policy pattern represented by a given JSON string.
      operationId: getPolicyPattern
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: The JSON string representing a policy
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: object
  /admin/api/negotiation:
    get:
      tags:
        - 'Connector: Selfservice'
      summary: Endpoint for Policy Negotiation Status Check
      description: Return the policy negotiation status.
      operationId: getNegotiationStatus
      responses:
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - 'Connector: Selfservice'
      summary: Endpoint for Policy Negotiation Status
      description: Turn the policy negotiation on or off.
      operationId: setNegotiationStatus
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /:
    get:
      tags:
        - 'Connector: Selfservice'
      summary: Public Endpoint for Connector Self-description
      description: Get the connector's reduced self-description.
      operationId: getPublicSelfDescription_1
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/connector:
    get:
      tags:
        - 'Connector: Selfservice'
      summary: Connector Self-description
      description: Get the connector's self-description.
      operationId: getSelfService
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/ignore-unsupported-patterns:
    get:
      tags:
        - 'Connector: Selfservice'
      summary: Endpoint for Pattern Checking
      description: Return if unsupported patterns are ignored when requesting data.
      operationId: getPatternStatus
      responses:
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - 'Connector: Selfservice'
      summary: Endpoint for Allowing Unsupported Patterns
      description: Allow requesting data without policy enforcement if an unsupported
        pattern is recognized.
      operationId: getPatternStatus_1
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/request/description:
    post:
      tags:
        - 'Connector: IDS Connector Communication'
      summary: Description Request
      description: Request metadata from another IDS connector.
      operationId: requestMetadata
      parameters:
        - name: recipient
          in: query
          description: The URI of the requested IDS connector.
          required: true
          schema:
            type: string
            format: uri
          example: https://localhost:8080/api/ids/data
        - name: requestedResource
          in: query
          description: The URI of the requested resource.
          required: false
          schema:
            type: string
            format: uri
          example: https://w3id.org/idsa/autogen/resource/a4212311-86e4-40b3-ace3-ef29cd687cf9
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/request/contract:
    post:
      tags:
        - 'Connector: IDS Connector Communication'
      summary: Contract Request
      description: Send a contract request to another IDS connector.
      operationId: requestContract
      parameters:
        - name: recipient
          in: query
          description: The URI of the requested IDS connector.
          required: true
          schema:
            type: string
            format: uri
          example: https://localhost:8080/api/ids/data
        - name: requestedArtifact
          in: query
          description: The URI of the requested artifact.
          required: true
          schema:
            type: string
            format: uri
          example: https://w3id.org/idsa/autogen/artifact/a4212311-86e4-40b3-ace3-ef29cd687cf9
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: The contract offer for the requested resource.
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/request/artifact:
    post:
      tags:
        - 'Connector: IDS Connector Communication'
      summary: Artifact Request
      description: 'Request data from another IDS connector. INFO: Before an artifact
        can be requested, the metadata must be queried. The key generated in this
        process must be passed in the artifact query.'
      operationId: requestData
      parameters:
        - name: recipient
          in: query
          description: The URI of the requested IDS connector.
          required: true
          schema:
            type: string
            format: uri
          example: https://localhost:8080/api/ids/data
        - name: requestedArtifact
          in: query
          description: The URI of the requested artifact.
          required: true
          schema:
            type: string
            format: uri
          example: https://w3id.org/idsa/autogen/artifact/a4212311-86e4-40b3-ace3-ef29cd687cf9
        - name: transferContract
          in: query
          description: The URI of the contract agreement.
          required: false
          schema:
            type: string
            format: uri
          example: https://w3id.org/idsa/autogen/contractAgreement/a4212311-86e4-40b3-ace3-ef29cd687cf9
        - name: key
          in: query
          description: A unique validation key.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInput'
      responses:
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/{resource-id}:
    get:
      tags:
        - 'Connector: Resource Handling'
      summary: Get Resource
      description: Get the resource's metadata by its uuid.
      operationId: getResource
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - 'Connector: Resource Handling'
      summary: Update Resource
      description: Update the resource's metadata by its uuid.
      operationId: updateResource
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceMetadata'
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Invalid resource
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - 'Connector: Resource Handling'
      summary: Delete Resource
      description: Delete a resource by its uuid.
      operationId: deleteResource
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/{resource-id}/access:
    get:
      tags:
        - 'Connector: Resource Handling'
      summary: Get Data Access
      description: Get the number of the resource's data access.
      operationId: getAccess
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: object
  /admin/api/resources/{resource-id}/{representation-id}:
    get:
      tags:
        - 'Connector: Resource Handling'
      summary: Get Resource Representation
      description: Get the resource's representation by its uuid.
      operationId: getRepresentation
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
        - name: representation-id
          in: path
          description: The representation uuid.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: object
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - 'Connector: Resource Handling'
      summary: Update representation
      description: Update a resource's representation by its uuid.
      operationId: updateRepresentation
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
        - name: representation-id
          in: path
          description: The representation uuid.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRepresentation'
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Invalid representation
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
        - 'Connector: Resource Handling'
      summary: Remove Resource Representation
      description: Remove a resource's representation by its uuid.
      operationId: deleteRepresentation
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
        - name: representation-id
          in: path
          description: The representation uuid.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/{resource-id}/representation:
    post:
      tags:
        - 'Connector: Resource Handling'
      summary: Add Representation
      description: Add a representation to a resource.
      operationId: addRepresentation
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
        - name: id
          in: query
          required: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRepresentation'
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Representation already exists
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Representation created
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Invalid representation
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/{resource-id}/contract:
    get:
      tags:
        - 'Connector: Resource Handling'
      summary: Get Resource Contract
      description: Get the resource's usage policy.
      operationId: getContract
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - 'Connector: Resource Handling'
      summary: Update Resource Contract
      description: Update the resource's usage policy.
      operationId: updateContract
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: A new resource contract.
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Invalid resource
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/resource:
    post:
      tags:
        - 'Connector: Resource Handling'
      summary: Register Resource
      description: Register a resource by its metadata.
      operationId: createResource
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceMetadata'
        required: true
      responses:
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Invalid resource
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Resource created
          content:
            '*/*':
              schema:
                type: string
        "409":
          description: Resource already exists
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/{resource-id}/{representation-id}/data:
    post:
      tags:
        - 'Backend: Resource Data Handling'
      summary: Request Data String by Representation
      description: Get a resource's data as a string by representation.
      operationId: getDataByRepresentation
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
          example: a4212311-86e4-40b3-ace3-ef29cd687cf9
        - name: representation-id
          in: path
          description: The representation uuid.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInput'
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
  /admin/api/resources/{resource-id}/data:
    put:
      tags:
        - 'Backend: Resource Data Handling'
      summary: Publish Resource Data String
      description: Publish resource data as string.
      operationId: publishResource
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
          example: a4212311-86e4-40b3-ace3-ef29cd687cf9
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: The resource data.
        required: true
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "400":
          description: Invalid resource
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Resource created
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - 'Backend: Resource Data Handling'
      summary: Request Data String
      description: Get a resource's data as a string.
      operationId: getDataById
      parameters:
        - name: resource-id
          in: path
          description: The resource uuid.
          required: true
          schema:
            type: string
            format: uuid
          example: a4212311-86e4-40b3-ace3-ef29cd687cf9
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryInput'
      responses:
        "404":
          description: Not found
          content:
            '*/*':
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Ok
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    QueryInput:
      type: object
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
        params:
          type: object
          additionalProperties:
            type: string
        pathVariables:
          type: object
          additionalProperties:
            type: string
      description: The query parameters and headers to use when fetching the data
        from the backend system.
      example:
        headers:
          key: value
        params:
          key: value
        pathVariables:
          key: value
      oneOf:
        - $ref: '#/components/schemas/QueryInput'
    BackendSource:
      type: object
      properties:
        type:
          type: string
          description: Information of the backend system.
          enum:
            - local
            - http-get
            - https-get
            - https-get-basicauth
        url:
          type: string
          format: url
        username:
          type: string
        password:
          type: string
      description: Information of the backend system.
      oneOf:
        - $ref: '#/components/schemas/BackendSource'
    ResourceRepresentation:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
        byteSize:
          type: integer
          format: int32
        name:
          type: string
        source:
          $ref: '#/components/schemas/BackendSource'
      description: A new resource representation.
      example:
        uuid: 55795317-0aaa-4fe1-b336-b2e26a00597f
        type: JSON
        byteSize: 101
        name: Example Representation
        source:
          type: http-get
          url: https://samples.openweathermap.org/data/2.5/weather?lat=35&lon=139&appid=439d4b804bc8187953eb36d2a8c26a02
      oneOf:
        - $ref: '#/components/schemas/ResourceRepresentation'
    ResourceMetadata:
      required:
        - representations
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        keywords:
          type: array
          items:
            type: string
        policy:
          type: string
        owner:
          type: string
          format: uri
        license:
          type: string
          format: uri
        version:
          type: string
        endpointDocumentation:
          type: string
          format: uri
        representations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceRepresentation'
      description: Metadata of a resource
      example:
        title: ExampleResource
        description: ExampleResourceDescription
        policy: Example policy
        representations:
          - type: XML
            byteSize: 101
            name: Example Representation
            source:
              type: local
      oneOf:
        - $ref: '#/components/schemas/ResourceMetadata'
